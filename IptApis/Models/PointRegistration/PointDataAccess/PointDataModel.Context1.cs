//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace IptApis.Models.PointRegistration.PointDataAccess
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class PointDBEntities : DbContext
    {
        public PointDBEntities()
            : base("name=PointDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Driver> Drivers { get; set; }
        public virtual DbSet<Point> Points { get; set; }
        public virtual DbSet<PointFee> PointFees { get; set; }
        public virtual DbSet<PointPayment> PointPayments { get; set; }
        public virtual DbSet<Route> Routes { get; set; }
        public virtual DbSet<Semester> Semesters { get; set; }
        public virtual DbSet<Student> Students { get; set; }
        public virtual DbSet<StudentPoint> StudentPoints { get; set; }
        public virtual DbSet<AdmissionTest> AdmissionTests { get; set; }
        public virtual DbSet<AffiliatedOrganization> AffiliatedOrganizations { get; set; }
        public virtual DbSet<Alumnus> Alumni { get; set; }
        public virtual DbSet<AlumniExperience> AlumniExperiences { get; set; }
        public virtual DbSet<Answer> Answers { get; set; }
        public virtual DbSet<AppliedFor> AppliedFors { get; set; }
        public virtual DbSet<Approvee> Approvees { get; set; }
        public virtual DbSet<Assignment> Assignments { get; set; }
        public virtual DbSet<Attendance> Attendances { get; set; }
        public virtual DbSet<Batch> Batches { get; set; }
        public virtual DbSet<Book> Books { get; set; }
        public virtual DbSet<BookIssue> BookIssues { get; set; }
        public virtual DbSet<BookReturn> BookReturns { get; set; }
        public virtual DbSet<CafeteriaStaff> CafeteriaStaffs { get; set; }
        public virtual DbSet<CandidateEmployee> CandidateEmployees { get; set; }
        public virtual DbSet<CandidateStudent> CandidateStudents { get; set; }
        public virtual DbSet<CandidateTestDetail> CandidateTestDetails { get; set; }
        public virtual DbSet<ChatKeyword> ChatKeywords { get; set; }
        public virtual DbSet<ChatLog> ChatLogs { get; set; }
        public virtual DbSet<Choice> Choices { get; set; }
        public virtual DbSet<ClearanceRequest> ClearanceRequests { get; set; }
        public virtual DbSet<Config> Configs { get; set; }
        public virtual DbSet<Course> Courses { get; set; }
        public virtual DbSet<CourseEnrollment> CourseEnrollments { get; set; }
        public virtual DbSet<CourseFaculty> CourseFaculties { get; set; }
        public virtual DbSet<CourseFeedback> CourseFeedbacks { get; set; }
        public virtual DbSet<CourseOffered> CourseOffereds { get; set; }
        public virtual DbSet<daysofweek> daysofweeks { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<Designation> Designations { get; set; }
        public virtual DbSet<Domain> Domains { get; set; }
        public virtual DbSet<ECandidateApplication> ECandidateApplications { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<FacultySection> FacultySections { get; set; }
        public virtual DbSet<Feedback> Feedbacks { get; set; }
        public virtual DbSet<FoodItem> FoodItems { get; set; }
        public virtual DbSet<FoodOrder> FoodOrders { get; set; }
        public virtual DbSet<FrameworkLanguage> FrameworkLanguages { get; set; }
        public virtual DbSet<Fyp> Fyps { get; set; }
        public virtual DbSet<FypForm> FypForms { get; set; }
        public virtual DbSet<FypProposal> FypProposals { get; set; }
        public virtual DbSet<Job> Jobs { get; set; }
        public virtual DbSet<JobDescription> JobDescriptions { get; set; }
        public virtual DbSet<JobOpening> JobOpenings { get; set; }
        public virtual DbSet<JobTag> JobTags { get; set; }
        public virtual DbSet<MarksDistribution> MarksDistributions { get; set; }
        public virtual DbSet<MarksRecord> MarksRecords { get; set; }
        public virtual DbSet<option> options { get; set; }
        public virtual DbSet<Pattern> Patterns { get; set; }
        public virtual DbSet<Payment> Payments { get; set; }
        public virtual DbSet<Penalty> Penalties { get; set; }
        public virtual DbSet<Programme> Programmes { get; set; }
        public virtual DbSet<ProjectFramework> ProjectFrameworks { get; set; }
        public virtual DbSet<ProjectSkill> ProjectSkills { get; set; }
        public virtual DbSet<Question> Questions { get; set; }
        public virtual DbSet<RecruitmentExam> RecruitmentExams { get; set; }
        public virtual DbSet<RecruitmentQuestion> RecruitmentQuestions { get; set; }
        public virtual DbSet<Result> Results { get; set; }
        public virtual DbSet<Room> Rooms { get; set; }
        public virtual DbSet<SCandidateApplication> SCandidateApplications { get; set; }
        public virtual DbSet<Section> Sections { get; set; }
        public virtual DbSet<Skill> Skills { get; set; }
        public virtual DbSet<STransaction> STransactions { get; set; }
        public virtual DbSet<StudentExperience> StudentExperiences { get; set; }
        public virtual DbSet<StudentOpening> StudentOpenings { get; set; }
        public virtual DbSet<StudentProject> StudentProjects { get; set; }
        public virtual DbSet<StudentSkill> StudentSkills { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<Timeslot> Timeslots { get; set; }
        public virtual DbSet<Timetable> Timetables { get; set; }
        public virtual DbSet<TransactionType> TransactionTypes { get; set; }
        public virtual DbSet<Wallet> Wallets { get; set; }
        public virtual DbSet<AlumniSkill> AlumniSkills { get; set; }
        public virtual DbSet<ChatHistory> ChatHistories { get; set; }
        public virtual DbSet<FypConfig> FypConfigs { get; set; }
        public virtual DbSet<FypEvaluation> FypEvaluations { get; set; }
        public virtual DbSet<FypExternalJuryy> FypExternalJuryies { get; set; }
        public virtual DbSet<FypJury> FypJuries { get; set; }
        public virtual DbSet<FypMark> FypMarks { get; set; }
        public virtual DbSet<FypMember> FypMembers { get; set; }
        public virtual DbSet<OrderDetail> OrderDetails { get; set; }
        public virtual DbSet<RequestApproval> RequestApprovals { get; set; }
        public virtual DbSet<StudentAssignment> StudentAssignments { get; set; }
    
        public virtual ObjectResult<GetStudentProfile_Result> GetStudentProfile(Nullable<int> stdID)
        {
            var stdIDParameter = stdID.HasValue ?
                new ObjectParameter("StdID", stdID) :
                new ObjectParameter("StdID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStudentProfile_Result>("GetStudentProfile", stdIDParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
